#!/bin/bash
##################################################################################
##### LICENSE ####################################################################
##################################################################################
####                                                                          ####
#### Copyright (C) 2018 wuseman <info@sendit.nu>                              ####
####                                                                          ####
#### This program is free software: you can redistribute it and/or modify     ####
#### it under the terms of the GNU General Public License as published by     ####
#### the Free Software Foundation, either version 3 of the License, or        ####
#### (at your option) any later version.                                      ####
####                                                                          ####
#### This program is distributed in the hope that it will be useful,          ####
#### but WITHOUT ANY WARRANTY; without even the implied warranty of           ####
#### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            ####
#### GNU General Public License at <http://www.gnu.org/licenses/> for         ####
#### more details.                                                            ####
####                                                                          ####
##################################################################################
##### GREETINGS ##################################################################
##################################################################################
####                                                                          ####
#### To all developers that contributes to all kind of open source projects   ####
#### Keep up the good work!                                                   #<3#
####                                                                          ####
#### https://sendit.nu & https://github.com/wuseman                           ####
####                                                                          ####
##################################################################################
#### DESCRIPTION #################################################################
##################################################################################
####                                                                          ####
#### wdroid is a console tool which is intended to facilitate                 ####
#### the work of adb and fastboot for android devices.                        ####
####                                                                          ####
#### Enjoy another awesome 'bash' script from wuseman. Questions? Conact me!  ####
####                                                                          ####
##################################################################################
#### Begin of code  ##############################################################

     if [[ $EUID -ne 0 ]]; then
         echo -e "\nYou must be Administrator to run this script\n" 2>&1
         exit 1
     fi


echo -e "              _           _     _ "
echo -e "             | |         (_)   | |"
echo -e " __      ____| |____ ___  _  __| |"
echo -e " \ \ /\ / / _  |  __/ _ \| |/ _  | Author: wuseman"
echo -e "  \ V  V / (_| | | | (_) | | (_| | Version: 1.6"
echo -e "   \_/\_/ \____|_|  \___/|_|\____|"
echo -e "----------------------------------\n"

r='\e[1;34m'; g='\e[0;32m'; y='\e[1;33m'; b='\e[1;34m'; c='\e[1;36m'; w='\e[0;32m'; e='\e[0m'
red=`tput setaf 1`; green=`tput setaf 2`; reset=`tput sgr0`

CFG_FILE="/etc/wuzedroid/wuzedroid.conf"
CONTACTS="/etc/wuzedroid/contacts_for_adb.txt"

# is adb installed?
isadbinstalled="$(which adb 2> /dev/null)"
distro="$(cat /etc/os-release | head -n 1 | cut -d'=' -f2)"

if [ -z "$isadbinstalled" ]; then
 echo -e "\nThis tool require adb...\n"
  read -p "Want me to install adb for you? (yes/no) " adbinstall
fi

  case $adbinstall in
            "yes")
                echo -e "\nPlease wait..\n"
             sleep 1
     case $distro in
            "Gentoo")
                echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
                emerge --ask android-tools ;;
            "Sabayon") 
                echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
                emerge --ask android-tools ;;
            "Ubuntu") 
               echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
                apt update -y; apt upgrade -y; apt-get install adb ;;
            "Debian") 
               echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
               apt update -y; apt upgrade -y; apt-get install adb ;;
            "Raspbian") 
               echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
               apt update -y; apt upgrade -y; apt-get install adb ;;
            "Mint") 
               echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
               apt update -y; apt upgrade -y; apt-get install adb ;;

             "no") echo "Ok, go compile it yourself then mofo" ; exit ;;
esac
             echo -e "This tool is not supported for $distro, please go compile it from source instead...\n" 
esac

isphoneconnected="$(adb devices | sed '1d' | sed '/^$/d')"

if [ ! $isphoneconnected 2> /dev/null ]; then
   echo -e "Please check your device, it seems to be disconnected...\n"
   exit
fi


OPTION='Please enter your choice from below list: '
options=("Start ADB-Server" "Kill ADB-Server" "Reboot My Device" "Print Android Version" "Enter Android Shell" "Restart USB Mode" "Restart WIFI Mode" "View Wifi Passwords Stored On Device"
         "Connect To Device By Wifi" "Bruteforce PIN Lock" "Copy Files From Computer To Phone" "Copy Files From Your Phone To Your Computer" "Install Application(You need The .apk)"
         "Uninstall Application" "Unnistall OEM Bloatware" "Update/Upgrade Application(You Need The .apk File To Application)" "Make A Call" "Send SMS Text" "Read sms from device" "Delete ALL SMS Stored On Device" "Print Root Status" "Print Battery Level" "Print Serial No."
	 "Print Device Model" "Print IMEI" "Open Settings Menu" "List Permissions Known To The System" "Filter logs for errors ONLY" "Root Your Phone(Upcomming version)" "Take A Screenshot And View On Pc"  
         "Remove Empty Folders From Already Deleted Apps" "Take A Photo" "Is My Device QTADB Compatible" "Quit")

     select opt in "${options[@]}"
        do
          case $opt in
          "Start ADB-Server") if pidof -x "adb" >/dev/null; then echo >&2 'It seems adb is already running'; else echo >&2
           abort()
          {
          echo >&2 '
          ***************
          *** ABORTED ***
          ***************
          ' echo "An error occurred. Exiting..." >&2; exit 1; }
         trap 'abort' 0
         set -e
         # If an error occurs, the abort() function will be called.
         adb start-server 2> /dev/null; trap : 0;echo 'Sucessfully started adb '
         fi
         ;;

          "Kill ADB-Server")
           ### START ADB SERVER
           if pidof -x "add ps aux here plz" >/dev/null; then
           echo >&2 '
                  ADB Is not running '
         else
          echo >&2 '
         '
           abort()
          {
          echo >&2 '
          ***************
          *** ABORTED ***
          ***************
          '
          echo "An error occurred. Exiting..." >&2
          exit 1
          }
         trap 'abort' 0
         set -e
         adb kill-server
         trap : 0
         echo >&2 'Sucessfully killed adb'
         fi
         ;;

          "Reboot My Device")
          choice=" "
          while [ "$choice" != "q" ]
          do
          echo -e "\n1) Reboot System As Normal"
          echo "2) Reboot To Bootloader (Fastboot)"
          echo "3) Reboot to Recovery Mode"
          echo -e "q) Quit\n"

            read choice
                case $choice in
            '1')
             adb reboot
             echo "Rebooting System As Normal"
             ;;
            '2')
           echo "Reboot To Bootloader (Fastboot)"
           adb reboot bootloader
            ;;
            '3')
           echo "Reboot To Recovery Mode"
           echo "Use 'fastboot' instead of adb in recovery mode.."
           adb reboot recovery
             ;;
            'q') echo "Ok, aborting....";;
            *)   echo "menu item is not available; try again!";;
              esac
          done
          exit 0
          ;;

          "Print Android Version")
          ANDROID_VERSION="$(adb shell getprop ro.build.version.release)"
          echo -e "\nCurrent android version: $ANDROID_VERSION\n"
          ;;

          "Enter Android Shell")
           echo -e "\nTrying to enter your device terminal...\n"
           adb shell 'su -c echo -e "Connection works fine: yes/no"'
           read -p "Want me to connect for real: " yesno
             case $yesno in
                 yes) adb shell;;
                 no) exit 0;;
             esac
                 ;;

           "Restart USB mode")
           adb usb
           ;;

           "Restart WIFI  mode")
           adb wifi
           ;;


           "View Wifi Passwords Stored On Device")
           echo -e  "\n----- W I F I - P W D S -----\n"
           adb shell 'su -c cat /data/misc/wifi/wpa_supplicant.conf' | grep 'ssid=\|psk' | sed '2d' | sed 's/.//' | cut -d'"' -f2 | sed '1~2 a\\' ;;

           "Connect To Device By Wifi")
           read -p "Device ip: " ip; read -p "Device port: " port; adb connect $ip:$port ;;

           "Bruteforce PIN Lock")
           screen="$(adb shell dumpsys nfc | grep 'mScreenState=')"
           case $screen in
                 "mScreenState=OFF") echo "Screen is already off! Great, moving on.." ;;
                 "mScreenState=ON_UNLOCKED") echo "It seems screen is unlocked already, locking phone and turning screen off..."; adb shell input keyevent 26; echo -e "\nSuccessfully locked phone.." ;;
           esac

           echo -e "\nTurning screen on.."
           adb shell input keyevent 26 && echo -e "\nSuccessfully started screen..\n" || echo "Failed to power on screen ; exit"
           echo -e "Bruteforce attack will now start, please do not touch phone..."
           adb shell input keyevent 82
           adb shell input swipe 407 1211 378 85
           for i in {0000..9999}; do
           echo -e "Trying pin :$i"
           for (( j=0; j<${#i}; j++ )); do
           adb shell input keyevent $((`echo ${i:$j:1}`+7))
           done
           adb shell input keyevent 66
           adb shell input swipe 407 1211 378 85
           if ! (( `expr $i + 1` % 5 )); then
           adb shell input keyevent 66
           sleep 30
           adb shell input keyevent 82
           adb shell input swipe 407 1211 378 85
           fi
           done
           ;;

           "Copy Files From Computer To Phone")
           read -p "Source file to send: " source_file
           read -p "Folder to place $source_file: " destination
           adb push $source_file $destination
           echo ""
           ;;

           "Copy Files From Your Phone To Your Computer")
           read -p "Source file you want transfer to your computer: " android_source_file
           read -p "Where to store it on your computer: " pc_source
           adb pull $android_source_file $pc_source
           echo ""
           ;;

           "Install Application(You need The .apk)")
           read -p "Where is your apk file stored? (/path/to/appklication/application.apk) " apk_file
           adb -e install $apk_file
           echo ""
           ;;

           "Uninstall Application")
           "Where is your apk file stored? (/path/to/appklication/application.apk) " apk_file_to_uninstall
           adb -e install $apk_file_to_uninstall
           echo ""
           ;;

           "Uninstall OEM Bloatware")
           read -p "System Application To Remove " systemapp
           echo -e "\nList Applications That Can Be Removed\n"
           pm list packages | grep '<OEM/Carrier/App Name>
           pm uninstall -k --user 0 <name of package>
           ;;

           "Update/Upgrade Application(You Need The .apk File To Application)")
           "Where is your apk file stored? (/path/to/appklication/application.apk) " apk_file_to_update
           adb install -r $apk_file_to_uninstall # //  -r means re-install the app and keep its data on the device.
           echo ""
           ;;

           "Make A Call")
           adb kill-server; adb start-server
           echo -e "\n-----------------------------------------------"
           read -p "Enter the number you wanna call: +467" number
           adb shell am start -a android.intent.action.CALL -d tel:46+$number # // Make a call
           echo -e $g"\nPlease pick up your phone, calling +467$number"$e
           read -p $red"Please press any button hang up the call: " endcall
           echo -e "\nThe call has now been stopped.."
           echo -e "\n-----------------------------------------------"
           adb shell input keyevent 6
           echo ""
           exit 1
           ;;

          "Send SMS Text")
          read -p "Send to: +46"
          read -p "Text to send: $texttosend"
          adb shell am start -a android.intent.action.SENDTO -d sms:+46$smsnumver --es sms_body "$texttosend" --ez exit_on_sent true
          sleep 1; adb shell input keyevent 22; sleep 1; adb shell input keyevent 66
          echo "Sms has been sent"
          ;;

          "Read sms from device")
          sqlite3="$(which /usr/bin/sqlite3 2> /dev/null)"
             if [ -z "$sqlite3" ]; then
                 echo "You miss sqlite3, go compile it"
             fi
          echo -e "\nPlease wait.. Preparing..\n"
          adb shell 'su -c' chmod +x /data/data/com.android.providers.telephony/databases/mmssms.db
          adb shell 'su -c' mkdir -p /storage/tmp; adb shell 'su -c' chmod 777 /storage/tmp
          adb shell 'su -c' cp /data/data/com.android.providers.telephony/databases/mmssms.db /storage/tmp
          adb shell 'su -c' chmod 777 /storage/tmp/mmssms.db
          adb pull /storage/tmp/mmssms.db > /dev/null
          echo -e "\nDone, printing all sms from device...\n"
          sqlite3 mmssms.db 'SELECT * FROM sms WHERE read=0;' | cut -d'|' -f3,13
          ;;

          "Delete ALL SMS Stored On Device")
          read -p "are you REALLY sure? (press CTRL+c to cancel) " delem
          adb shell 'su -c' rm /data/data/com.android.providers.telephony/databases/mmssms.db
          adb reboot
          echo "We have now deleted your mms/sms database, phone is rebooting since this is required to sync sms/mms db..";;

          "Print Root Status") 
           echo -e "\nPlease wait, checking root status"
           adb shell which su >> /dev/null && echo -e "Device is rooted.\n" || echo -e "Device is NOT rooted.\n" ;;

          "Print Battery Level") 
           battery="$(adb shell dumpsys power | grep mBatteryLevel= | cut -d'=' -f2)"
           echo "Battery level is: $battery%";;


          "Print Serial No.")
              serial="$(adb shell getprop ro.serialno)"
           echo -e "\nDevice serial: $serial\n" ;;

          "Print Device Model")
             model="$(adb shell getprop ro.product.model)"
           echo -e "\nDevice model: $model\n)" ;;

          "Print IMEI")
            imei="$(adb shell service call iphonesubinfo 1 | awk -F "'" '{print $2}' | sed '1 d' | tr -d '.' | awk '{print}' ORS=)"
          echo -e "\nDevice imei: $imei\n" ;;


          "Open Settings Menu") adb shell am start -a android.settings.SETTINGS ;;

          "List Permissions Known To The System") adb shell pm list permissions -f ;;

          "Filter logs for errors ONLY") adb logcat *:E ;;

          "Take A Screenshot And View On Pc") adb shell screencap -p /sdcard/screencap.png 2> /dev/null; adb pull /sdcard/screencap.png > /dev/null; gwenview screencap.png 2> /dev/null; rm screencap.png ;;

          "Uninstall System App")  
             read -p "System app to delete:" systemapp
                pm uninstall -k --user 0 $systemapp ;;

          "Remove Empty Folders From Already Deleted Apps")
             echo -e "\nPlease wait, searching for empty directories.\n"
             find / -type d -empty -delete 2> /dev/null 
             echo -e "\nEmpty directories has now been deleted...\n" ;;

          "Take A Photo")
          if [ "$1" = "--delay" ]; then
               echo -e "Launching camera.."
                 adb shell "am start -a android.media.action.IMAGE_CAPTURE > /dev/null" && \
                 sleep $2 && \
                 adb shell "input keyevent 27"
               echo -e "Photo has been taken.."
           exit
                else
               echo "Hold camera still..."
                 sleep 0.3
               echo "Launching camera..."
                 sleep 0.3
               echo "Smile to the camera..."
                 adb shell "am start -a android.media.action.IMAGE_CAPTURE > /dev/null" && \
                 sleep 1 && \
                 adb shell "input keyevent 27"
                 sleep 1
               echo "Photo has been taken.." 
            fi
            ;;

          "Is My Device QTADB Compatible")
              adb shell busybox ls -l -a > /dev/null && echo -e "\nYour phone is compatible with qtadb..\n" || echo -e "\nYour phone is not compatible with qtadb. Go install busybox on your phone from playstore..\n"
            ;;

          "Quit") break ;; 

          *) echo "Sorry, that value has not been added yet, 1-36 is your options..." ;;
    esac
done
